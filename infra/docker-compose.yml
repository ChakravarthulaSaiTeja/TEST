version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: trading_postgres
    environment:
      POSTGRES_DB: trading_platform
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - trading_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_platform"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ..
      dockerfile: infra/Dockerfile.backend
    container_name: trading_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_platform
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-here
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../ml:/app/ml_models
      - ../backend:/app
    networks:
      - trading_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Model Service (optional, for heavy ML tasks)
  ml_service:
    build:
      context: ..
      dockerfile: infra/Dockerfile.ml
    container_name: trading_ml
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - MODEL_CACHE_DIR=/app/models
    volumes:
      - ../ml:/app/models
      - ../backend:/app
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - trading_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ..
      dockerfile: infra/Dockerfile.backend
    container_name: trading_celery_worker
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_platform
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../ml:/app/ml_models
    networks:
      - trading_network

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ..
      dockerfile: infra/Dockerfile.backend
    container_name: trading_celery_beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_password@postgres:5432/trading_platform
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../ml:/app/ml_models
    networks:
      - trading_network

  # Flower for Celery Monitoring
  flower:
    build:
      context: ..
      dockerfile: infra/Dockerfile.backend
    container_name: trading_flower
    command: celery -A app.core.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - trading_network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: trading_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - trading_network

volumes:
  postgres_data:
  redis_data:

networks:
  trading_network:
    driver: bridge
